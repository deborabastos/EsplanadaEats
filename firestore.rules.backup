rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for validation
    function isValidRestaurant(data) {
      return data.name is string &&
             data.name.size() >= 4 &&
             data.name.size() <= 100 &&
             data.averageQuality is number &&
             data.averageQuality >= 0 &&
             data.averageQuality <= 5 &&
             data.price is number &&
             data.price >= 0 &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }

    function isValidReview(data) {
      return data.restaurantId is string &&
             data.restaurantId.size() > 0 &&
             data.quality is number &&
             data.quality >= 0 &&
             data.quality <= 5 &&
             data.userName is string &&
             data.userName.size() > 0 &&
             data.userName.size() <= 50 &&
             data.userFingerprint is string &&
             data.userFingerprint.size() > 0 &&
             data.createdAt is timestamp;
    }

    function isValidRating(data) {
      return data.restaurantId is string &&
             data.restaurantId.size() > 0 &&
             data.rating is number &&
             data.rating >= 1 &&
             data.rating <= 5 &&
             data.userName is string &&
             data.userName.size() > 0 &&
             data.userName.size() <= 50 &&
             data.userFingerprint is string &&
             data.userFingerprint.size() > 0 &&
             (data.userId is string || data.userId == null) &&
             data.quality is number &&
             data.quality >= 0 &&
             data.quality <= 5 &&
             (data.comment is string || data.comment == null) &&
             (data.photos is list || data.photos == null) &&
             data.moderationStatus is string &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp;
    }

    function isValidRatingUpdate(data) {
      return (data.averageQuality is number && data.averageQuality >= 0 && data.averageQuality <= 5) &&
             (data.totalRatings is number && data.totalRatings >= 0) &&
             (data.ratingDistribution is map) &&
             (data.confidenceScore is number && data.confidenceScore >= 0 && data.confidenceScore <= 1) &&
             (data.weightedAverage is number && data.weightedAverage >= 0 && data.weightedAverage <= 5) &&
             (data.standardDeviation is number && data.standardDeviation >= 0) &&
             (data.median is number && data.median >= 1 && data.median <= 5) &&
             (data.mode is number && data.mode >= 1 && data.mode <= 5) &&
             (data.ratingLastUpdated is timestamp);
    }

    function isValidUserTracking(data) {
      return data.userFingerprint is string &&
             data.userFingerprint.size() > 0 &&
             data.restaurantId is string &&
             data.restaurantId.size() > 0 &&
             data.hasReviewed is bool &&
             data.createdAt is timestamp &&
             data.updatedAt is timestamp &&
             (data.userId is string || data.userId == null) &&
             data.reviewCount is number &&
             data.interactionType is string &&
             data.lastInteraction is timestamp &&
             data.firstInteraction is timestamp;
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner() {
      return isAuthenticated() &&
             request.auth.uid == resource.data.ownerId;
    }

    function isReviewOwner() {
      return isAuthenticated() &&
             request.auth.uid == resource.data.userId;
    }

    function isWithinRateLimit(actionType, maxCount, timeWindow) {
      return request.time < resource.data.timestamp + timeWindow &&
             resource.data.count < maxCount;
    }

    // Restaurants collection - Public read and create, limited update for images
    match /restaurants/{restaurantId} {
      allow read: if true; // Public read access for all users

      allow create: if isValidRestaurant(request.resource.data); // Allow anonymous creation for now

      // Allow updates for rating-related fields by anonymous users
      allow update: if (isAuthenticated() && isOwner() && isValidRestaurant(request.resource.data)) ||
                    // Allow anonymous users to update rating-related fields
                    (request.auth == null && isValidRatingUpdate(request.resource.data));

      allow delete: if isAuthenticated() && isOwner();
    }

    // Reviews collection - Public read, Authenticated create
    match /reviews/{reviewId} {
      allow read: if true; // Public read access for all users

      allow create: if isAuthenticated() &&
                     isValidReview(request.resource.data);

      allow update: if isAuthenticated() &&
                     request.auth.uid == resource.data.userId &&
                     isValidReview(request.resource.data);

      allow delete: if isAuthenticated() &&
                     request.auth.uid == resource.data.userId;
    }

    // Ratings collection - Public read and create (for anonymous users)
    match /ratings/{ratingId} {
      allow read: if true; // Public read access for all users

      allow create: if isValidRating(request.resource.data); // Allow anonymous users with fingerprint

      allow update: if (isAuthenticated() && request.auth.uid == resource.data.userId) ||
                     (request.auth == null && resource.data.userFingerprint == request.resource.data.userFingerprint);

      allow delete: if (isAuthenticated() && request.auth.uid == resource.data.userId) ||
                     (request.auth == null && resource.data.userFingerprint == resource.data.userFingerprint);
    }

    // User tracking collection for duplicate prevention - Fingerprint-based access
    match /userTracking/{trackingId} {
      allow read: if true; // Allow read access for duplicate checking queries

      allow create: if isValidUserTracking(request.resource.data);

      allow update: if (isAuthenticated() && request.auth.uid == resource.data.userId) ||
                     (request.auth == null && resource.data.userFingerprint == resource.data.userFingerprint);

      allow delete: if (isAuthenticated() && request.auth.uid == resource.data.userId) ||
                     (request.auth == null && resource.data.userFingerprint == resource.data.userFingerprint);
    }

    // Rate limiting collection - System only
    match /rateLimits/{limitId} {
      allow read, write: if false; // System access only
    }

    // Connection tests collection - Public for testing
    match /connection-tests/{testId} {
      allow read, create: if true;
      allow update, delete: if false;
    }
  }
}